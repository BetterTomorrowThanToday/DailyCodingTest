name: Sync Silver and Gold to Repo B

on:
  push:
    paths:
      - '백준/Silver/**'
      - '백준/Gold/**'
  workflow_dispatch:  # 수동 실행이 가능하도록 설정

jobs:
  sync-to-b:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout A repository
      - name: Checkout A repository
        uses: actions/checkout@v3

      # Step 2: Set up Git
      - name: Set up Git
        run: |
          git config --global user.name "Hiki's GitHub Actions Bot"
          git config --global user.email "wsx0239@gmail.com"

      # Step 3: Prepare files for B repository
      - name: Prepare files for B repository
        run: |
          mkdir -p temp_b_repo
          
          # Iterate over Silver, Gold directories
          for level in Silver Gold; do
            if [ -d 백준/$level ]; then
              # Iterate over all problem directories
              for problem_dir in 백준/$level/*/; do
                problem_name=$(basename "$problem_dir")
          
                # Get the commit date for the problem directory
                COMMIT_DATE=$(git log -1 --format=%ci -- "$problem_dir")
                COMMIT_YEAR=$(date -d "$COMMIT_DATE" +"%Y")
                COMMIT_MONTH=$(date -d "$COMMIT_DATE" +"%m")
                COMMIT_DAY=$(date -d "$COMMIT_DATE" +"%d")
          
                # Calculate the first day of the month
                FIRST_OF_MONTH="${COMMIT_YEAR}-${COMMIT_MONTH}-01"
                LAST_OF_MONTH=$(date -d "$FIRST_OF_MONTH +1 month -1 day" +"%Y-%m-%d")
          
                # Iterate through weeks of the month
                WEEK_START=$FIRST_OF_MONTH
                WEEK_NUMBER=1
                while [ $(date -d "$WEEK_START" +%Y-%m-%d) \< $LAST_OF_MONTH ]; do
                  WEEK_END=$(date -d "$WEEK_START +6 days" +%Y-%m-%d)
          
                  # Adjust the week range to fit within the current month
                  ACTUAL_START=$(date -d "$WEEK_START" +%Y-%m-%d)
                  ACTUAL_END=$(date -d "$WEEK_END" +%Y-%m-%d)
                  if [ $(date -d "$ACTUAL_END" +%Y-%m-%d) \> $LAST_OF_MONTH ]; then
                    ACTUAL_END=$LAST_OF_MONTH
                  fi
          
                  # Count how many days in this week belong to the current month
                  DAYS_IN_MONTH=0
                  for DAY in $(seq 0 6); do
                    CURRENT_DAY=$(date -d "$WEEK_START +$DAY days" +%Y-%m-%d)
                    CURRENT_MONTH=$(date -d "$CURRENT_DAY" +%m)
          
                    if [ "$CURRENT_MONTH" -eq "$COMMIT_MONTH" ]; then
                      DAYS_IN_MONTH=$((DAYS_IN_MONTH + 1))
                    fi
                  done
          
                  # Check if this week belongs to the month (4 days or more in the month)
                  if [ "$DAYS_IN_MONTH" -ge 4 ]; then
                    DIR_NAME="${COMMIT_YEAR}-${COMMIT_MONTH}/Week${WEEK_NUMBER}"
                    mkdir -p temp_b_repo/${DIR_NAME}/${problem_name}
          
                    # Copy the problem directory to the appropriate location
                    cp -r $problem_dir/* temp_b_repo/${DIR_NAME}/${problem_name}/
          
                    # Handle the last commit message for the problem directory
                    LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s" -- "$problem_dir")
                    echo "Last commit message for $problem_name: $LAST_COMMIT_MSG"
          
                    # Store the commit message to be used later
                    echo "LAST_COMMIT_MSG=$LAST_COMMIT_MSG" >> $GITHUB_ENV
                    break
                  fi
          
                  # Move to the next week
                  WEEK_START=$(date -d "$WEEK_START +7 days" +%Y-%m-%d)
                  WEEK_NUMBER=$((WEEK_NUMBER + 1))
                done
              done
            fi
          done

      # Step 4: Clone B repo and handle empty repo case
      - name: Clone B repository
        run: |
          git clone https://${{ secrets.TOKEN }}@github.com/WeGoEver/HeeChan_Algo.git b_repo
          cd b_repo
          
          # Check if the repository is empty (no commits)
          if [ -z "$(git log --oneline)" ]; then
            echo "B repository is empty, creating an initial commit"
            # Initialize the repository with an initial commit if it's empty
            git commit --allow-empty -m "Initial commit"
            git push origin main
          else
            git pull origin main
          fi

      # Step 5: Copy prepared files to B repository and commit each file with its own commit message
      - name: Commit each file with its own commit message
        run: |
          cd b_repo
          
          # Loop through all the directories in the temp_b_repo and commit each file separately
          for problem_dir in temp_b_repo/*/*/*/; do
            problem_name=$(basename "$problem_dir")
          
            # Get the commit message for the problem directory from the environment variable
            COMMIT_MSG=$(grep "LAST_COMMIT_MSG" $GITHUB_ENV | grep "$problem_name" | sed 's/LAST_COMMIT_MSG=//')
          
            # Ensure the commit message is not empty
            if [ -z "$COMMIT_MSG" ]; then
              COMMIT_MSG="Sync changes from A repository"
            fi
          
            # Add the file to git and commit with the specific message
            git add "$problem_dir"
            git commit -m "$COMMIT_MSG"
            git push origin main
          done

      # Step 6: Clean up temporary directory
      - name: Clean up temp directory
        run: |
          rm -rf temp_b_repo