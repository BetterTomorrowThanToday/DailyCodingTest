name: Sync Silver and Gold to Repo B

on:
  push:
    paths:
      - '백준/Silver/**'
      - '백준/Gold/**'
      - '백준/Bronze/**'
  workflow_dispatch:  # 수동 실행이 가능하도록 설정

jobs:
  sync-to-b:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout A repository
      - name: Checkout A repository
        uses: actions/checkout@v3

      # Step 2: Set up Git
      - name: Set up Git
        run: |
          git config --global user.name "Hiki's GitHub Actions Bot"
          git config --global user.email "wsx0239@gmail.com"

      # Step 3: Prepare files for B repository
      - name: Prepare files for B repository
        run: |
          mkdir -p temp_b_repo
          
          # Iterate over Silver, Gold, and Bronze directories
          for level in Bronze Silver Gold; do
            if [ -d 백준/$level ]; then
              # Iterate over all problem directories
              for problem_dir in 백준/$level/*/; do
                problem_name=$(basename "$problem_dir")
          
                # Get the commit date for the problem directory or any file inside it
                COMMIT_DATE=$(git log -1 --format=%ci -- "$problem_dir")
                COMMIT_YEAR=$(date -d "$COMMIT_DATE" +"%Y")
                COMMIT_MONTH=$(date -d "$COMMIT_DATE" +"%m")
                COMMIT_DAY=$(date -d "$COMMIT_DATE" +"%d")
          
                # Calculate the week number based on commit date
                COMMIT_DAY_OF_WEEK=$(date -d "$COMMIT_DATE" +%u)  # Get the day of the week (1=Monday, 7=Sunday)
                COMMIT_START_OF_WEEK=$(date -d "$COMMIT_DATE -$((COMMIT_DAY_OF_WEEK - 1)) days" +"%Y-%m-%d")
                DAYS_SINCE_COMMIT_START=$(( ( $(date -d "$COMMIT_DATE" +%s) - $(date -d "$COMMIT_START_OF_WEEK" +%s) ) / 86400 ))
                WEEK_NUMBER=$(( (DAYS_SINCE_COMMIT_START) / 7 + 1 ))

                # Create the directory based on commit date and week
                DIR_NAME="${COMMIT_YEAR}-${COMMIT_MONTH}/Week${WEEK_NUMBER}"
                mkdir -p temp_b_repo/${DIR_NAME}/${problem_name}
          
                # Copy the problem files to the respective directory
                cp -r $problem_dir/* temp_b_repo/${DIR_NAME}/${problem_name}/
          
                # Handle each file's commit message (get the last commit message)
                LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s" -- "$problem_dir")
                echo "Last commit message for $problem_name: $LAST_COMMIT_MSG"
          
                # Store the commit message to be used later
                echo "LAST_COMMIT_MSG=$LAST_COMMIT_MSG" >> $GITHUB_ENV

                # Now, handle the files inside the problem directory (e.g., *.java files)
                for file in "$problem_dir"*.java; do
                  if [ -f "$file" ]; then
                    FILE_COMMIT_DATE=$(git log -1 --format=%ci -- "$file")
                    FILE_COMMIT_YEAR=$(date -d "$FILE_COMMIT_DATE" +"%Y")
                    FILE_COMMIT_MONTH=$(date -d "$FILE_COMMIT_DATE" +"%m")
                    FILE_COMMIT_DAY=$(date -d "$FILE_COMMIT_DATE" +"%d")
          
                    # Calculate the week number based on commit date of the file
                    FILE_COMMIT_DAY_OF_WEEK=$(date -d "$FILE_COMMIT_DATE" +%u)  # Get the day of the week (1=Monday, 7=Sunday)
                    FILE_COMMIT_START_OF_WEEK=$(date -d "$FILE_COMMIT_DATE -$((FILE_COMMIT_DAY_OF_WEEK - 1)) days" +"%Y-%m-%d")
                    FILE_DAYS_SINCE_COMMIT_START=$(( ( $(date -d "$FILE_COMMIT_DATE" +%s) - $(date -d "$FILE_COMMIT_START_OF_WEEK" +%s) ) / 86400 ))
                    FILE_WEEK_NUMBER=$(( (FILE_DAYS_SINCE_COMMIT_START) / 7 + 1 ))

                    # Create the directory based on file commit date and week
                    FILE_DIR_NAME="${FILE_COMMIT_YEAR}-${FILE_COMMIT_MONTH}/Week${FILE_WEEK_NUMBER}"
                    mkdir -p temp_b_repo/${FILE_DIR_NAME}/$(basename "$file")
          
                    # Copy the file to the respective directory
                    cp "$file" temp_b_repo/${FILE_DIR_NAME}/$(basename "$file")
                  fi
                done
              done
            fi
          done

      # Step 4: Clone B repo and handle empty repo case
      - name: Clone B repository
        run: |
          git clone https://${{ secrets.TOKEN }}@github.com/WeGoEver/HeeChan_Algo.git b_repo
          cd b_repo
          
          # Check if the repository is empty (no commits)
          if [ -z "$(git log --oneline)" ]; then
            echo "B repository is empty, creating an initial commit"
            # Initialize the repository with an initial commit if it's empty
            git commit --allow-empty -m "Initial commit"
            git push origin main
          else
            git pull origin main
          fi

      # Step 5: Copy prepared files to B repository
      - name: Copy prepared files to B repository
        run: |
          # Copy the files from temp_b_repo directly to the target folder in b_repo
          cp -r temp_b_repo/* b_repo/
          
          # Clean up temp directory
          rm -rf temp_b_repo

      # Step 6: Commit and push to B repository with A repo's last commit message
      - name: Commit and push to B repository with A repo's commit messages
        run: |
          cd b_repo
          
          # Print the LAST_COMMIT_MSG for debugging
          echo "Last commit message: $LAST_COMMIT_MSG"
          
          git add .
          # Ensure LAST_COMMIT_MSG is not empty or undefined
          if [ -z "$LAST_COMMIT_MSG" ]; then
            echo "LAST_COMMIT_MSG is empty, using default message"
            LAST_COMMIT_MSG="Sync changes from A repository"
          fi
          
          # Commit with the last commit message from A repo
          git commit -m "Sync Silver and Gold updates from A repository: ${LAST_COMMIT_MSG}"
          git push origin main