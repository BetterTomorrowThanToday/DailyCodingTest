name: Sync Silver and Gold to Repo B

on:
  push:
    paths:
      - '백준/Silver/**'
      - '백준/Gold/**'
  workflow_dispatch:  # 수동 실행이 가능하도록 설정

jobs:
  sync-to-b:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout A repository
      - name: Checkout A repository
        uses: actions/checkout@v3

      # Step 2: Set up Git
      - name: Set up Git
        run: |
          git config --global user.name "Hiki's GitHub Actions Bot"
          git config --global user.email "wsx0239@gmail.com"

      # Step 3: Calculate current year, month, and week
      - name: Determine current year, month, and week of the month
        id: date
        run: |
          TODAY="2024-11-24"  # 기준일 설정
          YEAR=$(date -d "$TODAY" +"%Y")
          MONTH=$(date -d "$TODAY" +"%m")
          DAY=$(date -d "$TODAY" +"%d")
          
          # 해당 월의 1일을 기준으로 주차 계산
          FIRST_OF_MONTH="${YEAR}-${MONTH}-01"
          FIRST_DAY_OF_WEEK=$(date -d "$FIRST_OF_MONTH" +%u)  # 1일이 무슨 요일인지 구하기 (1=월요일, 7=일요일)

          # 1일이 포함된 주의 시작일 (일요일로 설정)
          if [ "$FIRST_DAY_OF_WEEK" -eq 1 ]; then
            START_OF_WEEK="${FIRST_OF_MONTH}"
          else
            START_OF_WEEK=$(date -d "$FIRST_OF_MONTH - $((FIRST_DAY_OF_WEEK - 1)) days" +"%Y-%m-%d")
          fi

          # 오늘 날짜부터 해당 월의 1일까지 차이 일수를 계산
          DAYS_SINCE_START_OF_MONTH=$(( ( $(date -d "$TODAY" +%s) - $(date -d "$START_OF_WEEK" +%s) ) / 86400 ))

          # 주차 계산 (일요일부터 토요일까지 한 주 기준)
          WEEK_NUMBER=$(( (DAYS_SINCE_START_OF_MONTH) / 7 + 1 ))

          # 해당 월의 마지막 날이 토요일이 아니면, 그 다음날은 Week 1로 설정
          END_OF_MONTH=$(date -d "$YEAR-$MONTH-01 +1 month -1 day" +"%Y-%m-%d")  # 해당 월의 마지막 날
          END_OF_MONTH_DAY=$(date -d "$END_OF_MONTH" +"%u")  # 마지막 날이 무슨 요일인지 확인

          # 마지막 날이 토요일이 아니면, 그 다음 날은 새로운 월의 첫 번째 주로 설정
          if [ "$END_OF_MONTH_DAY" -ne 6 ]; then
            WEEK_NUMBER=$((WEEK_NUMBER + 1))  # 새로운 월의 첫 번째 주로 설정
          fi

          DIR_NAME="${YEAR}-${MONTH}/Week${WEEK_NUMBER}"
          echo "::set-output name=dir_name::${DIR_NAME}"

      # Step 4: Prepare files for B repository
      - name: Prepare files for B repository
        run: |
          DIR_NAME=${{ steps.date.outputs.dir_name }}
          mkdir -p temp_b_repo/${DIR_NAME}
          
          # Copy Silver and Gold directories (문제 번호.문제 이름) into the appropriate folder
          for level in Silver Gold; do
            if [ -d 백준/$level ]; then
              for problem_dir in 백준/$level/*/; do
                problem_name=$(basename "$problem_dir")
                mkdir -p temp_b_repo/${DIR_NAME}/$problem_name
                cp -r $problem_dir/* temp_b_repo/${DIR_NAME}/$problem_name/
          
                # Get the last commit message for the problem directory
                LAST_COMMIT_MSG=$(git log -1 --pretty=format:"%s" -- "$problem_dir")
                echo "Last commit message for $problem_name: $LAST_COMMIT_MSG"

                # Store the commit message to be used later
                echo "LAST_COMMIT_MSG=$LAST_COMMIT_MSG" >> $GITHUB_ENV
              done
            fi
          done

      # Step 5: Clone B repo and handle empty repo case
      - name: Clone B repository
        run: |
          git clone https://${{ secrets.TOKEN }}@github.com/WeGoEver/HeeChan_Algo.git b_repo
          cd b_repo
          
          # Check if the repository is empty (no commits)
          if [ -z "$(git log --oneline)" ]; then
            echo "B repository is empty, creating an initial commit"
            # Initialize the repository with an initial commit if it's empty
            git commit --allow-empty -m "Initial commit"
            git push origin main
          else
            git pull origin main
          fi

      # Step 6: Copy prepared files to B repository
      - name: Copy prepared files to B repository
        run: |
          DIR_NAME=${{ steps.date.outputs.dir_name }}
          
          # Ensure the target directory exists before copying files
          mkdir -p b_repo/${DIR_NAME}  # Add this line to create the target directory
          
          # Copy the files from temp_b_repo directly to the target folder in b_repo
          cp -r temp_b_repo/${DIR_NAME}/* b_repo/${DIR_NAME}/
          
          # Clean up temp directory
          rm -rf temp_b_repo

      # Step 7: Commit and push to B repository with A repo's last commit message
      - name: Commit and push to B repository with A repo's commit messages
        run: |
          cd b_repo
          
          # Print the LAST_COMMIT_MSG for debugging
          echo "Last commit message: $LAST_COMMIT_MSG"
          
          git add .
          # Ensure LAST_COMMIT_MSG is not empty or undefined
          if [ -z "$LAST_COMMIT_MSG" ]; then
            echo "LAST_COMMIT_MSG is empty, using default message"
            LAST_COMMIT_MSG="Sync changes from A repository"
          fi
          
          # Commit with the last commit message from A repo
          git commit -m "Sync Silver and Gold updates from A repository: ${LAST_COMMIT_MSG}"
          git push origin main